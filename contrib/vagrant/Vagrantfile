# -*- mode: ruby -*-
# vi: set ft=ruby :


# --- Configuration

PROJECT_NAME  = ENV['PROJECT_NAME']  || "ANSIBLES"

BOX_IMAGE     = ENV['BOX_IMAGE']     || "precise64"
BOX_NAME      = ENV['BOX_NAME']      || "testbox"
BOX_ADMIN     = ENV['BOX_ADMIN']     || "vagrant"
BOX_IP_ZONE   = ENV['BOX_IP_ZONE']   || "192.168.111"
BOX_IP_END    = ENV['BOX_IP_END']    || "111"
BOX_MEMORY    = ENV['BOX_MEMORY']    || "1024"
BOX_CPUS      = ENV['BOX_CPUS']      || "1"
BOX_DOCKER    = ENV['BOX_DOCKER']    || false


# --- Vagrant

Vagrant.configure("2") do |config|

  # DOCKER SCRIPT

  $docker_cmd = ""
  if BOX_DOCKER
    # Provision docker and new kernel if deployment was not done
    if Dir.glob("#{File.dirname(__FILE__)}/.vagrant/machines/default/*/id").empty?

      # Add lxc-docker package
      $docker_cmd = "apt-get update -qq; apt-get install -q -y python-software-properties; " \
        "add-apt-repository -y ppa:dotcloud/lxc-docker; apt-get update -qq; " \
        "apt-get install -q -y lxc-docker; "

      # Add X.org Ubuntu backported 3.8 kernel for LXC support
      $docker_cmd << "add-apt-repository -y ppa:ubuntu-x-swat/r-lts-backport; " \
        "apt-get update -qq; apt-get install -q -y linux-image-3.8.0-19-generic; "

      # Add guest additions for local vbox VM
      $docker_cmd << "apt-get install -q -y linux-headers-3.8.0-19-generic dkms; " \
        "echo 'Downloading VBox Guest Additions...'; " \
        "wget -q http://dlc.sun.com.edgesuite.net/virtualbox/4.2.12/VBoxGuestAdditions_4.2.12.iso; "

      # Prepare the VM to add guest additions after reboot
      $docker_cmd << "echo -e 'mount -o loop,ro /home/vagrant/VBoxGuestAdditions_4.2.12.iso /mnt\n" \
        "echo yes | /mnt/VBoxLinuxAdditions.run\numount /mnt\n" \
          "rm /root/guest_additions.sh; ' > /root/guest_additions.sh; " \
        "chmod 700 /root/guest_additions.sh; " \
        "sed -i -E 's#^exit 0#[ -x /root/guest_additions.sh ] \\&\\& /root/guest_additions.sh#' /etc/rc.local; " \
        "echo 'Installation of VBox Guest Additions is proceeding in the background.'; " \
        "echo '\"vagrant reload\" can be used in about 2 minutes to activate the new guest additions.'; "

      # Activate new kernel
      $docker_cmd << "shutdown -r +1; "
    end
  end

  # CONFIGURATION

  config.vm.box = "precise64"

  config.vm.network :private_network, ip: BOX_IP_ZONE + "." + BOX_IP_END
  config.vm.network :forwarded_port, guest: 22, host: ("9" + BOX_IP_END).to_i

  config.vm.provider :virtualbox do |vb|
    # vb.gui = true
    vb.customize ["modifyvm", :id, "--ioapic", "on"]
    vb.customize ["modifyvm", :id, "--memory", BOX_MEMORY]
    vb.customize ["modifyvm", :id, "--cpus", BOX_CPUS]
  end

  config.vm.provision :shell, :inline => $docker_cmd

  config.vm.provision :ansible do |ansible|
    ansible.playbook = "vagrant_auth.yml"
    ansible.inventory_file = "../../vagrant"
    ansible.sudo = true
    ansible.limit = BOX_NAME
  end

end
